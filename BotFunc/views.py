from django.http.response import HttpResponse
from django.views.decorators.csrf import csrf_exempt
import json
import telebot
from BotFunc.config import TOKEN_practice
from telebot.types import Message
from BotFunc.models import User
from BotFunc.Pavel import registration
from BotFunc.Dmitriy import main_func
from BotFunc.Emil import team_management
from BotFunc.Sergey import check_registration, check_changes, change_registration, make_changes
from telebot import types


hide_markup = types.ReplyKeyboardRemove(selective=False)
bot = telebot.TeleBot(TOKEN_practice)


@csrf_exempt
def event(request):
    json_list = json.loads(request.body)
    update = telebot.types.Update.de_json(json_list)
    try:
        bot.process_new_messages([update.message])
    except:
        bot.process_new_callback_query([update.callback_query])
    return HttpResponse()


@bot.callback_query_handler(func=lambda call: True)
def add_to_team(call):
    print(type(call))
    arr = call.data.split('@@@')
    user = User.objects.get(user_id=str(arr[1]))
    if arr[0] == '–¥–∞':
        flag = True
        info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + user.login + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É " + arr[2]
    else:
        flag = False
        info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + user.login + \
            " –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É " + arr[2]

    team_management(bot, arr[1], arr[2], flag)
    bot.answer_callback_query(call.id, info)


@bot.message_handler(commands=["start"])
def test_message(message: Message):
    if User.objects.filter(user_id=str(message.chat.id)):
        bot.send_message(
            message.chat.id, "üí° –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=hide_markup)
    else:
        try:
            update_reg_info = User.objects.create(user_id=str(
                message.chat.id), login=message.chat.username)
            if message.text[7:] == "23CBEACDEA458E9CED9807D6CBE2F4D6":
                bot.send_message(
                    message.chat.id, "üéì –í–∞—à–∞ —Ä–æ–ª—å: –º–µ–Ω—Ç–æ—Ä.", reply_markup=hide_markup)
                update_reg_info.is_mentor = "1"
            update_reg_info.save()
            bot.send_message(
                message.chat.id, "üí° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n", reply_markup=hide_markup)
            bot.send_message(
                message.chat.id, "üñç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é (—Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã): ", reply_markup=hide_markup)
        except:
            bot.send_message(message.chat.id, "‚úà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram. \n"
                             "–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É–∫–∞–∂–µ—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–Ω–æ–≤–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=hide_markup)


@bot.message_handler(commands=["help"])
def help_message(message: Message):
    help_txt = "üåç IU7 SUMMER PRACTICE TELEGRAM BOT üåç\n\n" \
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã (–∫–∞–∫ –¥–ª—è " \
        "–º–µ–Ω—Ç–æ—Ä–∞, —Ç–∞–∫ –∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤) " \
        "–Ω–∞ –ª–µ—Ç–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞ " \
        "–≤ –ú–ì–¢–£ –∏–º. –ù. –≠. –ë–∞—É–º–∞–Ω–∞, –Ω–∞ –∫–∞—Ñ–µ–¥—Ä–µ –ò–£7. \n\n" \
        "üõ† –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n" \
        "üìç –†–æ–º–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π @mrrvz1\n" \
        "üìç –ü–µ—Ä–µ—Å—Ç–æ—Ä–æ–Ω–∏–Ω –ü–∞–≤–µ–ª @Justarone\n" \
        "üìç –ö–æ–Ω–æ–Ω–µ–Ω–∫–æ –°–µ—Ä–≥–µ–π @hackfeed\n" \
        "üìç –î–º–∏—Ç—Ä–∏–π –ö–æ–≤–∞–ª—ë–≤ @dimkov27\n" \
        "üìç –°–∏–º–æ–Ω–µ–Ω–∫–æ –≠–º–∏–ª—å @A_Mill\n\n" \
        "üî± –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. 2019 –≥–æ–¥."
    bot.send_message(message.chat.id, help_txt)


@bot.message_handler(content_types=["text"])
def main(message: Message):
    if User.objects.filter(user_id=str(message.chat.id)):
        user = User.objects.get(user_id=str(message.chat.id))
        if user.expected_command == "wait agree":
            pass
        if user.expected_input != "":
            registration(message, bot, user)
            check_registration(message, bot, user)
            check_changes(message, bot, user)
            make_changes(message, bot, user)
            change_registration(message, bot, user)
            if user.expected_input == "":
                main_func(message, bot, user)
        else:
            main_func(message, bot, user)
